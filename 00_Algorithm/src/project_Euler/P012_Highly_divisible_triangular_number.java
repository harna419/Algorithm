package project_Euler;

import java.util.ArrayList;



/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 * */

public class P012_Highly_divisible_triangular_number {
	
	static ArrayList<Integer> arr=new ArrayList<Integer>();
	
	public static boolean check(long num){
		//중요 포인트 : 숫자의 검증 과정을 항상 최소화 할수 있는 로직을 생각해야한다.
		//삼각수의 경우: 제곱근까지로 나누어지는 인수*2 하면 모든 인수의 갯수를 구할수 있다. 반복되는 구조다.
		//삼각수의 모든 인수의 갯수는 짝수라는 점을 캣치해내야한다.
		arr.clear();
		long test=(long)Math.sqrt(num);
		for(int i=1;i<=test;i++){
			if(num%i==0){arr.add(i);}
		}
		//System.out.println(arr.size());
		if(!(2*arr.size()>500)){return false;}
		
		return true;
	}
	
	public static void main(String[] args) {
		long number=1;
		long triangle=0;
		
		while(true){
			triangle+=number;
			//System.out.println(triangle);
			if(check(triangle)){break;}
			number++;
		}
		
		//
		System.out.println(triangle);
		
	}//main
	
}//class end
